@using Humanizer;

@{
    Layout = "/_Master.cshtml";

    IgnoreBody();

    ViewData[Keys.Title] = Model.String("Name");

    string type = Model.String("Type");
    string name = Model.String("Name");
    string nuget = Model.String("NuGet");
    string description = Model.String("Description");
    string author = Model.String("Author");
    string repository = Model.String("Repository");
    string projectUrl = Model.String("ProjectUrl");
    string version = Model.String("AnalyzedPackageVersion");
    string publishDate = Model.String("AnalyzedPackagePublishDate");
    string supportedCakeVersions = Model.String("SupportedCakeVersions");
    string categories = (String.Join(" ", Model.List<string>("Categories").Select(x => $"<span class=\"badge badge-secondary\">{x}</span>")));
    var targetFrameworks = Model.List<string>("TargetFrameworks")?.Where(tfm => !string.IsNullOrWhiteSpace(tfm)).ToList() ?? new List<string>();
    var assemblies = Model.List<string>("Assemblies");
}

<section class="content-header">
    <h1>@name</h1>
</section>

<section class="content">
    @{
        if (name == "Cake.DotNetTool.Module") 
        {
            @Html.Partial("_ExtensionDotNetToolModule");
        }
    }

    <article class="col-sm-8 extension-details no-padding">
        <p class="extension-description">
            @description
        </p>

        @switch (type) {
            case "Addin":
                @Html.Partial("_UsageAddin");
                break;
            case "Module":
                @Html.Partial("_UsageModule");
                break;
        }

        @if (type != null && type.Equals("Addin", StringComparison.OrdinalIgnoreCase) && assemblies != null)
        {
            <h2 class="no-anchor">Aliases</h2>

            // Read classes containing aliases from current addin.
            var aliasClasses =
                Documents["Aliases"]
                    .Where(
                        aliasDocument =>
                            aliasDocument != null &&
                            aliasDocument.Document(CodeAnalysisKeys.ContainingAssembly) != null &&
                            assemblies.Any(
                                addinAssembly =>
                                    addinAssembly != null &&
                                    addinAssembly.Contains(
                                        aliasDocument.Document(CodeAnalysisKeys.ContainingAssembly).String("Name") + ".dll")));

            // Show summary of aliases class
            var summary =
                aliasClasses
                    .Select(x => x.String(CodeAnalysisKeys.Summary))
                    .FirstOrDefault(x => !string.IsNullOrEmpty(x));
            @if(!string.IsNullOrWhiteSpace(summary))
            {
                <div>@Html.Raw(summary)</div>
            }

            @Html.Partial(
                "_AliasesList",
                aliasClasses,
                new ViewDataDictionary(ViewData)
                {
                    { "groupHeadingLevel", 3 },
                    { "showAddinReference", false }
                })
        }
    </article>

    <aside class="col-sm-4 extension-info" aria-label="Extension info" >
        <h2 class="no-anchor">Info</h2>
        <ul class="list-unstyled">
            <li>
                Latest version: @version
            </li>
            @if (!string.IsNullOrWhiteSpace(publishDate))
            {
                var parsedPublishDate = @DateTime.Parse(publishDate, null, System.Globalization.DateTimeStyles.RoundtripKind);

                <li>
                    <span title="@parsedPublishDate.ToOrdinalWords()">
                        <i class="fa fa-clock-o"></i>
                        Last updated @parsedPublishDate.Humanize()
                    </span>
                </li>
            }
            @if (!string.IsNullOrWhiteSpace(projectUrl) && HasProjectUrlDifferentFromRepoUrl(projectUrl, repository))
            {
                <li>
                    <i class="fa fa-globe"></i>
                    <a href="@projectUrl" target="_blank">Project Site</a>
                </li>
            }
            <li>
                <img src="/assets/img/nuget.png">
                <a href="https://www.nuget.org/packages/@nuget" target="_blank">@nuget</a>
            </li>
            @if (!string.IsNullOrWhiteSpace(repository))
            {
                <li>
                    <i class="fa fa-code-fork"></i>
                    <a href="@repository" target="_blank">Source repository</a>
                    @if (repository.StartsWith("https://github.com/cake-contrib/"))
                    {
                        <a href="/community/cake-contrib">
                            <i class="fa fa-check-circle" data-toggle="tooltip" title="Source code hosted in cake-contrib organization"></i>
                        </a>
                    }
                </li>
            }
        </ul>

        @if (!string.IsNullOrWhiteSpace(supportedCakeVersions))
        {
            <h2 class="no-anchor">Supported Cake Versions</h2>
            <p>
                <ul class="list-unstyled">
                    <li>
                        Versions: @supportedCakeVersions
                        <i class="fa fa-info-circle" data-toggle="tooltip" title="These are the versions of Cake with an API compatible with the latest version of this addin. Depending on the API used in the extension it might also work with other versions of Cake. An earlier version of the addin might be compatible with other versions of Cake."></i>
                    </li>
                </ul>
            </p>
        }

        @if (targetFrameworks.Count > 0)
        {
            <h2 class="no-anchor">Target Frameworks</h2>
            <p>
                @foreach (var tfm in targetFrameworks)
                {
                    <span class="badge badge-secondary">@tfm</span>
                }
            </p>
        }

        <h2 class="no-anchor">Authors</h2>
        <p>
            @author
        </p>

        <h2 class="no-anchor">Categories</h2>
        <p>
            @Html.Raw(categories)
        </p>
    </aside>
</section>

@functions
{
    public bool HasProjectUrlDifferentFromRepoUrl(string projectUrl, string repositoryUrl)
    {
        return !NormalizeUrl(projectUrl).Equals(NormalizeUrl(repositoryUrl));
    }

    public string NormalizeUrl(string url)
    {
        var result = url.TrimEnd('/');

        if (result.EndsWith(".git"))
        {
            result = result.Remove(result.LastIndexOf(".git"));
        }

        return result;
    }
}
