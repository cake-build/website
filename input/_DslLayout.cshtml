@{
    Layout = "/_Master.cshtml";

    ViewData[Keys.Title] = "Reference - " + Model.String(Keys.GroupKey);
}

@section Infobar {
    <div id="infobar-headings"></div>
}

@section Sidebar {
    @Html.Partial("_DslSidebar")
}

<section class="content-header">
    <h1>@Model.String(Keys.GroupKey) aliases</h1>
</section>
<section class="content">
    @{
        // Group aliases by addin
        var aliasesGroupedByAssembly =
            Model
                .DocumentList(Keys.GroupDocuments)
                .GroupBy(x => x.Document(CodeAnalysisKeys.ContainingAssembly)?.String(CodeAnalysisKeys.DisplayName))
                .OrderBy(x => x.Key);
    }

    @foreach(var group in aliasesGroupedByAssembly)
    {
        // Determine addin name
        var isAddin = !string.IsNullOrWhiteSpace(group.Key);
        string addinName = null;
        @if(isAddin)
        {
            IDocument extension =
                Documents["Extensions"]
                    .FirstOrDefault(x =>
                        x.List<string>("Assemblies") != null &&
                        x.List<string>("Assemblies")
                            .Any(
                                addinAssembly =>
                                    addinAssembly != null &&
                                    addinAssembly.Contains(group.Key)));
            @if(extension != null)
            {
                addinName = $"{extension.String("Name")} addin";
            }
        }

        var aliasClass = isAddin ? "addinAliases" : "builtinAliases";
        var aliasStyle = isAddin ? "style=display:none;" : null;
        <div class="aliasList @aliasClass" @aliasStyle>
            @{
                // Group heading
                var groupHeading = addinName ?? "Built-In";
            }
            <h1 id='@groupHeading.Replace(" ", "-")'>@groupHeading</h1>

            @if(isAddin)
            {
                // Addin annotation
                @Html.Partial("_AddinAlert", group.FirstOrDefault());
            }

            @{
                // Summary
                string summary =
                    group
                        .Select(x => x.String(CodeAnalysisKeys.Summary))
                        .FirstOrDefault(x => !string.IsNullOrEmpty(x));
            }

            @if(!string.IsNullOrWhiteSpace(summary))
            {
                <p>@Html.Raw(summary)</p>
            }

            @{
                // Alias list
            }
            @Html.Partial(
                "_AliasesList",
                group,
                new ViewDataDictionary(ViewData)
                {
                    { "groupHeadingLevel", 2 }
                })
        </div>
    }

    @RenderBody()
</section>
