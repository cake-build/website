@using Microsoft.AspNetCore.Html
@model IEnumerable<IDocument>

@{
    int groupHeadingLevel = (int?)ViewData["groupHeadingLevel"] ?? 1;
    bool showAddinReference = (bool?)ViewData["showAddinReference"] ?? true;

    var aliasGroups =
        Model
            .SelectMany(x => x.DocumentList(CodeAnalysisKeys.Members))
            .Where(x => x.String("Kind") == "Method")
            .Select(x => new
            {
                Doc = x,
                MethodAlias = x.DocumentList(CodeAnalysisKeys.Attributes).Any(attr => attr.String(CodeAnalysisKeys.Name) == "CakeMethodAliasAttribute"),
                PropertyAlias = x.DocumentList(CodeAnalysisKeys.Attributes).Any(attr => attr.String(CodeAnalysisKeys.Name) == "CakePropertyAliasAttribute")
            })
            .Where(x => x.MethodAlias || x.PropertyAlias)
            .GroupBy(x => x.Doc.DocumentList(CodeAnalysisKeys.Attributes)
                .Where(attr => attr.String(CodeAnalysisKeys.Name) == "CakeAliasCategoryAttribute")
                .Select(attr => attr.Get<Microsoft.CodeAnalysis.AttributeData>(CodeAnalysisKeys.AttributeData).ConstructorArguments.FirstOrDefault().Value)
                .FirstOrDefault() as string ?? string.Empty)
            .OrderBy(x => x.Key);
}

@if(!aliasGroups.Any())
{
    <p>No aliases found</p>
}
else {
    @foreach(var aliasGroup in aliasGroups)
    {
        string groupName = string.IsNullOrEmpty(aliasGroup.Key) ? "General" : aliasGroup.Key;
        @Html.Raw($"<h{groupHeadingLevel} id='{groupName.Replace(" ", "-")}'>{groupName}</h{groupHeadingLevel}>")
        <div class="box">
            <div class="box-body no-padding">
                <table class="alias-list table table-striped table-hover two-cols">
                    @foreach(var alias in aliasGroup.OrderBy(x => x.Doc.String(CodeAnalysisKeys.DisplayName)))
                    {
                        <tr>
                            <td>
                                @* Determine if alias is from an addin *@
                                @{
                                    string extensionName = null;
                                }
                                @if(showAddinReference)
                                {
                                    IDocument assemblyDoc = alias.Doc.Document(CodeAnalysisKeys.ContainingAssembly);
                                    if (assemblyDoc != null)
                                    {
                                        IDocument extension =
                                            Documents["Extensions"]
                                                .FirstOrDefault(x => 
                                                    x.List<string>("Assemblies") != null &&
                                                    x.List<string>("Assemblies")
                                                        .Any(
                                                            addinAssembly =>
                                                                addinAssembly != null &&
                                                                addinAssembly.Contains(
                                                                    assemblyDoc.String(CodeAnalysisKeys.DisplayName)
                                                                )));
                                        extensionName = extension?.String("Name");
                                    }
                                }

                                @if(extensionName != null)
                                {
                                    <i class="fa-solid fa-puzzle-piece"></i>
                                }
                                
                                @if(alias.MethodAlias)
                                {
                                    <text>@GetAliasTypeLink(alias.Doc, false)</text>
                                }
                                else
                                {
                                    <text>@Context.GetTypeLink(alias.Doc, alias.Doc.String("Name"), false)</text>
                                }

                                @if(showAddinReference && extensionName != null)
                                {
                                    <text>
                                        <br/>
                                        <small>
                                            <i>Alias from <a href="/extensions/@extensionName.ToLower().Replace(".", "-")/">@extensionName</a> addin</i>
                                        </small>
                                    </text>
                                }
                            </td>
                            <td>
                                @Html.Raw(alias.Doc.String(CodeAnalysisKeys.Summary))
                            </td>
                        </tr>
                    }
                </table>
            </div>
        </div>
    }
}

@functions
{
    public HtmlString GetAliasTypeLink(IMetadata metadata, bool linkTypeArguments)
    {
        var link = Context.GetTypeLink(metadata, linkTypeArguments);
        var encodedHtml = link.Value?
            .Replace("(ICakeContext, <wbr>", "(")
            .Replace("(ICakeContext)", "()");

        return new HtmlString(encodedHtml);
    }
}
