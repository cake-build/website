@model Cake.Web.Models.TypeViewModel
@{
    ViewBag.Title = @Api.TypeName(Model.Data);
    ViewBag.Menu = "Reference";
    Layout = "~/Views/Shared/_LayoutSidebar.cshtml";
}

@section Sidebar
{
    <h4><i class="fa fa-bookmark"></i> Related</h4>
    <ul class="api-nav">
        <li>
            <a href="@Url.Action("Index", "Dsl", new {path = ""})">DSL Reference</a>
        </li>
    </ul>
}

@* TITLE *@
<div class="main-content-title">
    <h2>@Api.TypeName(Model.Data) <small>@Api.TypeClassificationName(Model.Data)</small></h2>
    @Api.BreadCrumb(@Model.Data)
</div>

@if (Model != null && Model.Data != null)
{
    <!-- Identity: @Model.Data.Identity -->
}

<div style="margin-top: 20px">

    @* ADDIN *@
    @if (@Model.Data.Metadata.IsOwnedByAddin)
    {
        @Html.Partial("_AddinWarning", Model.Data.Metadata)
    }

    @* SUMMARY *@
    @if (@Model.Data.Summary != null)
    {
        <div id="summary" class="panel panel-info">
            <div class="panel-heading">
                <b>Summary</b>
            </div>
            <div class="panel-body">
                <p>@Api.Comment(Model.Data.Summary)</p>
            </div>
        </div>
    }

    @* SYNTAX *@
    <div id="syntax" class="panel panel-default">
        <div class="panel-heading">
            <b>Syntax</b>
        </div>
        <div style="margin: 15px;">
            <pre><code class="csharp">@Api.Syntax(@Model.Data)</code></pre>
        </div>
    </div>

    @* FIELDS *@
    @if (Model.Fields.Count > 0)
    {
        <div id="extensionmethods" class="panel panel-default">
            <div class="panel-heading">
                @if (Model.IsEnum)
                {
                    <b>Members</b>
                }
                else
                {
                    <b>Fields</b>
                }
            </div>
            <table class="table table-bordered table-striped">
                <tbody>
                    @foreach (var field in Model.Fields.OrderBy(x => x.Definition.Name))
                    {
                        <tr>
                            <td>@Api.FieldName(field)</td>
                            <td>@Api.Comment(field.Summary)</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

    @* CONSTRUCTORS *@
    @if (Model.Constructors.Count > 0)
    {
        <div id="constructors" class="panel panel-default">
            <div class="panel-heading">
                <b>Constructors</b>
            </div>
            <table class="table table-bordered table-striped">
                <tbody>
                    @foreach (var constructor in Model.Constructors.OrderBy(x => x.Definition.Name))
                    {
                        <tr>
                            <td>@Api.MethodLink(constructor)</td>
                            <td>@Api.Comment(constructor.Summary)</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

    @* PROPERTIES *@
    @if (Model.Properties.Count > 0)
    {
        <div id="properties" class="panel panel-default">
            <div class="panel-heading">
                <b>Properties</b>
            </div>
            <table class="table table-bordered table-striped">
                <tbody>
                    @foreach (var property in Model.Properties.OrderBy(x => x.Data.Identity))
                    {
                        <tr>
                            <td>@Api.PropertyLink(property.Data)</td>
                            <td>@Api.TypeLink(property.Data.Definition.PropertyType)</td>
                            <td>
                                @Api.Comment(property.Data.Summary)
                                @if (property.Owner != Model.Data)
                                {
                                    <text>(Inherited from @Api.TypeLink(property.Owner))</text>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

    @* METHODS *@
    @if (Model.Methods.Count > 0)
    {
        <div id="methods" class="panel panel-default">
            <div class="panel-heading">
                <b>Methods</b>
            </div>
            <table class="table table-bordered table-striped">
                <tbody>
                    @foreach (var method in Model.Methods.OrderBy(x => x.Data.Definition.Name))
                    {
                        <tr>
                            <td>@Api.MethodLink(method.Data)</td>
                            <td>
                                @Api.Comment(method.Data.Summary)
                                @if (method.Owner != Model.Data)
                                {
                                    <text>(Inherited from @Api.TypeLink(method.Owner))</text>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

    @* EXTENSION METHODS *@
    @if (Model.ExtensionMethods.Count > 0)
    {
        <div id="extensionmethods" class="panel panel-default">
            <div class="panel-heading">
                <b>Extension Methods</b>
            </div>
            <table class="table table-bordered table-striped">
                <tbody>
                    @foreach (var method in Model.ExtensionMethods.OrderBy(x => x.Definition.Name))
                    {
                        <tr>
                            <td>@Api.MethodLink(method, MethodRenderOption.Name | MethodRenderOption.Parameters | MethodRenderOption.ExtensionMethod)</td>
                            <td>@Api.Comment(method.Summary)</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

    @* OPERATORS *@
    @if (Model.Operators.Count > 0)
    {
        <div id="operators" class="panel panel-default">
            <div class="panel-heading">
                <b>Operators</b>
            </div>
            <table class="table table-bordered table-striped">
                <tbody>
                    @foreach (var @operator in Model.Operators.OrderBy(x => x.Definition.Name))
                    {
                        <tr>
                            <td>@Api.MethodLink(@operator)</td>
                            <td>@Api.Comment(@operator.Summary)</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>