#n Humanizer.Core

System.Globalization.CultureInfo.DefaultThreadCurrentCulture = System.Globalization.CultureInfo.CreateSpecificCulture("en-GB");

ContentStreamFactory = new MemoryContentStreamFactory();

Settings[Keys.Host] = "cakebuild.net";
Settings[Keys.LinksUseHttps] = true;
Settings[DocsKeys.Title] = "Cake";
Settings[DocsKeys.Logo] = "/assets/img/logo.png";
Settings[DocsKeys.SourceFiles] = "../release/cake-repo/src/**/{!bin,!obj,!packages,!*.Tests,!Cake.Frosting.Example,!Cake.Frosting.Template,}/**/*.cs";
Settings[DocsKeys.BaseEditUrl] = "https://github.com/cake-build/website/blob/master/input/";
Settings[DocsKeys.IncludeGlobalNamespace] = false;
Settings[DocsKeys.IncludeDateInPostPath] = true;
Settings[DocsKeys.BlogAtomPath] = "blog/feed/atom/index.xml";
Settings[DocsKeys.BlogRssPath] = "blog/feed/rss/index.xml";

// Reads maintainer metadata
Pipelines.InsertBefore(Docs.Code, "Maintainers",
    ReadFiles("../maintainers/*.yml"),
    Yaml()
);

// Reads extension metadata
Pipelines.InsertBefore(Docs.Code, "Extensions",
    ReadFiles("../extensions/*.yml"),
    Yaml(),
    Meta(
        "SupportedCakeVersions",
        FileSystem.GetInputFile($"../release/extensions/{@doc.String("NuGet")}.supportedcakeversions").Exists
            ? FileSystem.GetInputFile($"../release/extensions/{@doc.String("NuGet")}.supportedcakeversions").ReadAllText()
            : null
    ),
    Meta(
        Keys.WritePath,
        new FilePath("extensions/" + @doc.String("Name").ToLower().Replace(".", "-") + "/index.html")
    ),
    Meta(DocsKeys.NoSidebar, true)
);

// Read all classes containing aliases from API documentation
Pipelines.InsertAfter(Docs.Api, "Aliases",
    Documents(Docs.Api),
    Where(
        @doc.String(CodeAnalysisKeys.Kind) == "NamedType"
        && @doc.DocumentList(CodeAnalysisKeys.Attributes)
            .Any(attr => attr.String(CodeAnalysisKeys.Name) == "CakeAliasCategoryAttribute")
    )
);

// Prepares aliases classes for reference page by grouping them by category.
Pipelines.InsertAfter("Aliases", "DslAliases",
    GroupByMany(
        @doc.DocumentList(CodeAnalysisKeys.Attributes)
            .Where(attr => attr.String(CodeAnalysisKeys.Name) == "CakeAliasCategoryAttribute")
            .Select(attr => attr.Get<Microsoft.CodeAnalysis.AttributeData>(CodeAnalysisKeys.AttributeData).ConstructorArguments.FirstOrDefault().Value)
            .Distinct(),
        Documents("Aliases")
    ),
    Meta(
        "ContainsBuiltInAliases",
        @doc
            .DocumentList(Keys.GroupDocuments)
            .Any(x => string.IsNullOrWhiteSpace(x.Document(CodeAnalysisKeys.ContainingAssembly)?.String(CodeAnalysisKeys.DisplayName)))
            ? true
            : false),
    Meta(Keys.WritePath, new FilePath("dsl/" + @doc.String(Keys.GroupKey).ToLower().Replace(" ", "-") + "/index.html")),
    Meta(Keys.RelativeFilePath, @doc.FilePath(Keys.WritePath)),
    OrderBy(@doc.String(Keys.GroupKey))
);

// Renders individual extension pages
Pipelines.Add("RenderExtensions",
    Documents("Extensions"),
    Razor()
        .WithLayout("/_ExtensionsLayout.cshtml"),
    WriteFiles()
);

// Renders reference page
Pipelines.Add("RenderDsl",
    Documents("DslAliases"),
    Razor()
        .WithLayout("/_DslLayout.cshtml"),
    Headings(),
    HtmlInsert("div#infobar-headings", (doc, ctx) => ctx.GenerateInfobarHeadings(doc)),
    WriteFiles()
);

// Creates sitemap
Pipelines.Add("BuildSiteMap",
    Documents(@ctx.Documents.ExceptPipeline("Extensions").Except(@ctx.Documents.FromPipeline("Code"))),
    Sitemap(),
    WriteFiles((d,c) => "sitemap.xml")
);
